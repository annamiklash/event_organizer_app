package pjatk.pro.event_organizer_app.trait.event


import com.google.common.collect.ImmutableSet
import com.google.common.collect.Sets
import pjatk.pro.event_organizer_app.address.model.Address
import pjatk.pro.event_organizer_app.catering.model.Catering
import pjatk.pro.event_organizer_app.catering.model.CateringItem
import pjatk.pro.event_organizer_app.cateringforchosenevent.model.CateringForChosenEventLocation
import pjatk.pro.event_organizer_app.cateringforchosenevent.model.CateringOrderChoice
import pjatk.pro.event_organizer_app.cuisine.model.Cuisine
import pjatk.pro.event_organizer_app.customer.avatar.model.CustomerAvatar
import pjatk.pro.event_organizer_app.customer.guest.model.Guest
import pjatk.pro.event_organizer_app.customer.model.Customer
import pjatk.pro.event_organizer_app.customer.model.dto.CustomerDto
import pjatk.pro.event_organizer_app.event.model.EventType
import pjatk.pro.event_organizer_app.event.model.OrganizedEvent
import pjatk.pro.event_organizer_app.event.model.dto.OrganizedEventDto
import pjatk.pro.event_organizer_app.location.locationforevent.model.LocationForEvent
import pjatk.pro.event_organizer_app.location.model.Location
import pjatk.pro.event_organizer_app.optional_service.model.interpreter.Interpreter
import pjatk.pro.event_organizer_app.optional_service.model.interpreter.translation.model.TranslationLanguage
import pjatk.pro.event_organizer_app.optional_service.optional_service_for_location.model.OptionalServiceForChosenLocation
import pjatk.pro.event_organizer_app.user.model.dto.UserDto
import spock.lang.Shared

import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime

import static pjatk.pro.event_organizer_app.enums.ConfirmationStatusEnum.NOT_CONFIRMED
import static pjatk.pro.event_organizer_app.enums.EventStatusEnum.IN_PROGRESS

trait OrganizedEventTrait {

    @Shared
    OrganizedEvent fakeOrganizedEvent = OrganizedEvent.builder()
            .id(1L)
            .name("SAMPLE NAME")
            .date(LocalDate.parse('2007-12-03'))
            .startTime(LocalTime.parse("10:00:00"))
            .endTime(LocalTime.parse("12:00:00"))
            .guestCount(10)
            .eventStatus(IN_PROGRESS.name())
            .eventType(EventType.builder()
                    .id(1L)
                    .type("Party")
                    .build())
            .customer(Customer.builder()
                    .id(1L)
                    .firstName('Geralt')
                    .lastName('Rivijski')
                    .birthdate(LocalDate.parse('2007-12-03'))
                    .phoneNumber(new BigInteger("123123123"))
                    .email('test@email.com')
                    .guests(new HashSet<>())
                    .events(new HashSet<>())
                    .build())
            .locationForEvent(Set.of(LocationForEvent.builder()
                    .id(1L)
                    .confirmationStatus("CONFIRMED")
                    .event(OrganizedEvent.builder()
                            .date(LocalDate.parse('2007-12-03'))
                            .build())
                    .location(Location.builder().id(2L)
                            .caterings(new HashSet<Catering>())
                            .build())
                    .services(ImmutableSet.of(
                            OptionalServiceForChosenLocation.builder()
                                    .id(1L)
                                    .confirmationStatus("CONFIRMED")
                                    .build()
                    ))
                    .cateringsForEventLocation(ImmutableSet.of(
                            CateringForChosenEventLocation.builder()
                                    .id(1L)
                                    .confirmationStatus('CONFIRMED')
                                    .build()
                    ))
                    .build()))
            .guests(ImmutableSet.of(
                    Guest.builder()
                            .id(1l)
                            .firstName('Test')
                            .lastName('Test')
                            .email('test@test.com')
                            .build()))
            .build()

    OrganizedEvent fakeFullOrganizedEvent = OrganizedEvent.builder()
            .id(1L)
            .name("SAMPLE NAME")
            .date(LocalDate.parse('2007-12-03'))
            .startTime(LocalTime.parse("10:00:00"))
            .endTime(LocalTime.parse("12:00:00"))
            .guestCount(10)
            .eventStatus(IN_PROGRESS.name())
            .guests(ImmutableSet.of(Guest.builder()
                    .id(1l)
                    .firstName("Geralt")
                    .lastName("Rivijski")
                    .email('email@email.com')
                    .createdAt(LocalDateTime.parse('2007-12-03T10:15:30'))
                    .modifiedAt(LocalDateTime.parse('2007-12-03T10:15:30'))
                    .organizedEvents(ImmutableSet.of())
                    .customer(Customer.builder()
                            .id(1L)
                            .birthdate(LocalDate.parse('2007-12-03'))
                            .firstName("Geralt")
                            .lastName("Rivijski")
                            .build())
                    .build()))
            .customer(Customer.builder()
                    .id(1L)
                    .firstName('Geralt')
                    .lastName('Rivijski')
                    .birthdate(LocalDate.parse('2007-12-03'))
                    .phoneNumber(new BigInteger("123123123"))
                    .email('email@email.com')
                    .guests(new HashSet<>())
                    .events(new HashSet<>())
                    .appProblems(new HashSet<>())
                    .avatar(CustomerAvatar.builder().id(1L).image("Image".getBytes()).fileName("file").build())
                    .build())
            .eventType(EventType.builder()
                    .id(1L)
                    .type("Party")
                    .build())
            .locationForEvent(Set.of(LocationForEvent.builder()
                    .id(1L)
                    .confirmationStatus("CONFIRMED")
                    .timeFrom(LocalTime.parse("10:00:00"))
                    .timeTo(LocalTime.parse("12:00:00"))
                    .event(OrganizedEvent.builder()
                            .date(LocalDate.parse('2007-12-03'))
                            .startTime(LocalTime.parse("10:00:00"))
                            .endTime(LocalTime.parse("12:00:00"))
                            .guestCount(10)
                            .build())
                    .location(Location.builder().id(2L)
                            .caterings(new HashSet<Catering>())
                            .locationAddress(Address.builder()
                                    .id(1)
                                    .country('Poland')
                                    .city('Warsaw')
                                    .streetName('PiÄ™kna')
                                    .streetNumber(1)
                                    .zipCode('01-157')
                                    .build())
                            .build())
                    .services(Set.of(OptionalServiceForChosenLocation.builder()
                            .id(1L)
                            .timeFrom(LocalTime.parse("10:00:00"))
                            .timeTo(LocalTime.parse("12:00:00"))
                            .comment("SAMPLE COMMENT")
                            .confirmationStatus("CONFIRMED")
                            .optionalService(Interpreter.builder()
                                    .id(1l)
                                    .type("INTERPRETER")
                            .languages(Set.of(TranslationLanguage.builder()
                                    .id(1l)
                                    .name('ENGLISH')
                                    .build()))
                                    .build())
                            .build()
                    ))
                    .cateringsForEventLocation(ImmutableSet.of(CateringForChosenEventLocation.builder()
                            .id(1L)
                            .time(LocalTime.parse('10:15'))
                            .comment("SAMPLE COMMENT")
                            .confirmationStatus(NOT_CONFIRMED.name())
                            .cateringOrder(ImmutableSet.of(
                                    CateringOrderChoice.builder()
                                            .id(1L)
                                            .amount(10)
                                            .item(CateringItem.builder()
                                                    .name('Name')
                                                    .itemType('Appetizer')
                                                    .description('SAMPLE DESCRIPTION')
                                                    .isVegan(true)
                                                    .isVegetarian(true)
                                                    .isGlutenFree(true)
                                                    .servingPrice(new BigDecimal('123456.00'))
                                                    .build())
                                            .build()
                            ))
                            .catering(Catering.builder()
                                    .id(1L)
                                    .name('Name')
                                    .email('email@email.com')
                                    .phoneNumber(new BigInteger('123456789'))
                                    .description('description')
                                    .cateringAddress(Address.builder()
                                            .id(1L)
                                            .country('Poland')
                                            .city('Warsaw')
                                            .streetName('PiÄ™kna')
                                            .streetNumber(1)
                                            .zipCode('01-157')
                                            .build())
                                    .cuisines(Sets.newHashSet(Cuisine.builder()
                                            .id(1)
                                            .name('Greek')
                                            .build()))
                                    .build())
                            .build()))
                    .build()))
            .build()

    OrganizedEventDto fakeOrganizedEventDto = OrganizedEventDto.builder()
            .id(1)
            .name("SAMPLE NAME")
            .date('2007-12-03')
            .startTime("10:00")
            .endTime("12:00")
            .guestCount(10)
            .eventStatus(IN_PROGRESS.name())
            .eventType("Party")
            .customer(CustomerDto.builder()
                    .firstName('Geralt')
                    .lastName('Rivijski')
                    .birthdate('2007-12-03')
                    .phoneNumber("123123123")
                    .user(UserDto.builder()
                            .id(1)
                            .type('C' as char)
                            .email('email@email.com')
                            .build())
                    .build())
            .build()
}